initSidebarItems({"fn":[["abs","Computes the absolute value."],["abs_sub","The positive difference of two numbers."],["cast","Cast from one machine scalar to another."],["checked_pow","Raises a value to the power of exp, returning `None` if an overflow occurred."],["clamp","A value bounded by a minimum and a maximum"],["one","Returns the multiplicative identity, `1`."],["pow","Raises a value to the power of exp, using exponentiation by squaring."],["range","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive))."],["range_inclusive","Return an iterator over the range [start, stop]"],["range_step","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],["range_step_inclusive","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],["signum","Returns the sign of the number."],["zero","Returns the additive identity, `0`."]],"mod":[["bigint",""],["cast",""],["complex",""],["integer",""],["iter",""],["pow",""],["rational",""],["traits",""]],"struct":[["BigInt","A big signed integer type."],["BigUint","A big unsigned integer type."],["Complex","A complex number in Cartesian form."]],"trait":[["Bounded","Numbers which have upper and lower bounds"],["CheckedAdd","Performs addition that returns `None` instead of wrapping around on overflow."],["CheckedDiv","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow."],["CheckedMul","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow."],["CheckedSub","Performs subtraction that returns `None` instead of wrapping around on underflow."],["Float",""],["FromPrimitive","A generic trait for converting a number to a value."],["Integer",""],["Num","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion."],["NumCast","An interface for casting between machine scalars."],["One","Defines a multiplicative identity element for `Self`."],["PrimInt",""],["Saturating","Saturating math operations"],["Signed","Useful functions for signed numbers (i.e. numbers that can be negative)."],["ToPrimitive","A generic trait for converting a value to a number."],["Unsigned","A trait for values which cannot be negative"],["Zero","Defines an additive identity element for `Self`."]],"type":[["BigRational","Alias for arbitrary precision rationals."],["Rational","Alias for a `Ratio` of machine-sized integers."]]});