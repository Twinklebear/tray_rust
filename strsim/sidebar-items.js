initSidebarItems({"enum":[["StrSimError",""]],"fn":[["damerau_levenshtein","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds."],["damerau_levenshtein_against_vec","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values."],["hamming","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths."],["jaro","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar)."],["jaro_against_vec","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar)."],["jaro_winkler","Like Jaro but gives a boost to strings that have a common prefix."],["jaro_winkler_against_vec","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values."],["levenshtein","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other."],["levenshtein_against_vec","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values."],["osa_distance","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once."],["osa_distance_against_vec","Calculates the optimal string alignment distance between a string and each string in a vector. Returns a vector of corresponding values."]],"type":[["HammingResult",""]]});